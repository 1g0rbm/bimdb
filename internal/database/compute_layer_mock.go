// Code generated by MockGen. DO NOT EDIT.
// Source: bimdb/internal/database (interfaces: ComputeLayerInterface)

// Package database is a generated GoMock package.
package database

import (
	compute "bimdb/internal/database/compute"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockComputeLayerInterface is a mock of ComputeLayerInterface interface.
type MockComputeLayerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComputeLayerInterfaceMockRecorder
}

// MockComputeLayerInterfaceMockRecorder is the mock recorder for MockComputeLayerInterface.
type MockComputeLayerInterfaceMockRecorder struct {
	mock *MockComputeLayerInterface
}

// NewMockComputeLayerInterface creates a new mock instance.
func NewMockComputeLayerInterface(ctrl *gomock.Controller) *MockComputeLayerInterface {
	mock := &MockComputeLayerInterface{ctrl: ctrl}
	mock.recorder = &MockComputeLayerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeLayerInterface) EXPECT() *MockComputeLayerInterfaceMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockComputeLayerInterface) Compute(arg0 context.Context, arg1 string) (compute.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compute", arg0, arg1)
	ret0, _ := ret[0].(compute.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockComputeLayerInterfaceMockRecorder) Compute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockComputeLayerInterface)(nil).Compute), arg0, arg1)
}
